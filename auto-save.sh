#!/bin/bash
AZURE_STORAGE_ACCOUNT_NAME="bdsbkpprod"
AZURE_CONTAINER_NAME="bds"
AZURE_STORAGE_SAS_READ_TOKEN="sp=r&st=2022-08-26T23:33:18Z&se=2032-12-30T07:33:18Z&sv=2021-06-08&sr=c&sig=5Xgvsnebq6uOuQULOBE7DB1Wxzo6OM0O5RtOqPpNooo%3D"
AZURE_STORAGE_SAS_WRITE_TOKEN="sp=racwl&st=2022-08-26T23:33:18Z&se=2032-12-30T07:33:18Z&sv=2021-06-08&sr=c&sig=Hozh3gLZJ70ZMn%2BpuMSSIWN4APexyjNHYLaMImE1JhA%3D"

# Define helper function for copying files
az_copy_to_blob_storage(){
  azcopy cp "${1}/*" "https://${AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${2}?${AZURE_STORAGE_SAS_WRITE_TOKEN}" --recursive
}

zip_backup ()
{
    return_value=1
    branch_name=$1
    current_branch=$2
    # creates a copy of workspace folder and compresses it
    zip -r ${branch_name}.zip .
    # Upload .zip file to azure storage account
    az_copy_to_blob_storage "${HOME}/workspace/${branch_name}.zip" ${AZURE_CONTAINER_NAME} || return "$return_value"
    azure_url="https://${AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${AZURE_CONTAINER_NAME}/${branch_name}.zip"
    # Calls API endpoint indicating that the backup was generated using zip
    curl -s -m 30 http://localhost:3097/createAutoSave?branchName=${branch_name}"&"reportedTo=${GITLAB_USER_EMAIL}"&"currentBranch=${current_branch}"&"type=zip"&"azureUrl=${azure_url}"&"${AZURE_STORAGE_SAS_READ_TOKEN} -H "Connection:close"
    return_value=0
    return "$return_value"
}

git_backup ()
{
    return_value=1
    branch_name=$1
    current_branch=$2
    if [ -f "${HOME}/workspace/.git/index.lock" ]
    then
        rm ${HOME}/workspace/.git/index.lock
    fi
    git checkout -b "${branch_name}" || return "$return_value"
    git add --all || return "$return_value"
    git commit -m 'Auto save generated by BlackDiamond studio.' || return "$return_value"
    git push --force origin ${branch_name} || return "$return_value"
    post_response=$(curl -s -m 30 http://localhost:3097/createAutoSave?branchName=${branch_name}"&"reportedTo=${GITLAB_USER_EMAIL}"&"currentBranch=${current_branch}"&"type=git -H "Connection:close")
    request_error='<title>Error</title>'
    response_error='ok:false'
    response_error_with_space='ok: false'
    # Validates response for createAutoSave call
    case $post_response in 
    *"$request_error"*)
        return "$return_value"
        ;;
    *"$response_error"*)
        return "$return_value"
        ;;
    *"$response_error_with_space"*)
        return "$return_value"
        ;;
    esac
    # git_backup finished successfully
    return_value=0
    return "$return_value"
}

# Obtains the current date for the branch name
timestamp=$(date +"%Y-%m-%d-%H-%M-%S")
# Creates the branch name
branch_name="bds-auto-save/${GITLAB_USER_EMAIL}/$timestamp"
branch_name_zip="bds-auto-save-${GITLAB_USER_EMAIL}-$timestamp"
# Opens the workspace directory
cd ${HOME}/workspace
# Obtains changes from git
git_status_response=$(git status --porcelain)
if [ -z "${git_status_response}" ]
then # No pending changes
    echo "- [INFO] - $(date +"%Y-%m-%d-%H-%M-%S") - There are NO pending changes."
else # There are pending changes
    # creates file with changes identified on auto-save
    git status --porcelain --untracked-files > ${branch_name_zip}.txt
    currentBranch=$(git branch --show-current)
    git_backup $branch_name $currentBranch
    return_value=$?
    if [ "$return_value" = "0" ]
    then
        echo "git backup SUCCEEDED"
    else
        echo "git backup FAILED starting zip backup..."
        zip_backup $branch_name_zip $currentBranch
    fi
fi
#kill -2 1